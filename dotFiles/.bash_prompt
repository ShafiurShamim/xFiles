#!/usr/bin/env bash
prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}


# ðŸ”¥	U+1F525
# ðŸ¤”	U+1F914
# ðŸ‡§ðŸ‡©	U+1F1E7;U+1F1E9;   
# ðŸ’ƒ	U+1F483;
# ðŸŒ±	U+1F331;

if tput setaf 1 &> /dev/null; then
  tput sgr0
  blackfg=$(tput setaf 0);   blackbg=$(tput setab 0)
  redfg=$(tput setaf 1);     redbg=$(tput setab 1)
  greenfg=$(tput setaf 2);   greenbg=$(tput setab 2)
  yellowfg=$(tput setaf 3);  yellowbg=$(tput setab 3)
  bluefg=$(tput setaf 4);    bluebg=$(tput setab 4)
  magentafg=$(tput setaf 5); magentabg=$(tput setab 5)
  cyanfg=$(tput setaf 6);    cyanbg=$(tput setab 6)
  whitefg=$(tput setaf 7);   whitebg=$(tput setab 7)

  #boldon=$(tput bold);   boldoff=$(tput rmso)
  ulon=$(tput smul);   uloff=$(tput rmul)
  col_reset=$(tput sgr0)
  
else
  blackfg="\e[30m";   blackbg="\e[40m"
  redfg="\e[31m";     redbg="\e[41m"
  greenfg="\e[32m";   greenbg="\e[42m"
  yellowfg="\e[33m";  yellowbg="\e[43m"
  bluefg="\e[34m";    bluebg="\e[44m"
  magentafg="\e[35m"; magentabg="\e[45m"
  cyanfg="\e[36m";    cyanbg="\e[46m"
  whitefg="\e[37m";   whitebg="\e\[47m"

  #boldon="\e[1m";   boldoff="\e[22m"
  ulon="\e[4m";   uloff="\e[24m"

  col_reset="\e[0m"
fi

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${redfg}";
else
	userStyle="${greenfg}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${redfg}";
else
	hostStyle="${yellowfg}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
#PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${whitefg}\] at ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${whitefg}\] in ";
PS1+="\[${greenfg}\]\W ðŸ”¥";
#PS1+="\$(prompt_git \"\[${whitefg}\] on \[${cyanfg}\]\" \"\[${bluefg}\]\")"; # Git repository details
PS1+="\n";


if [[ "${USER}" == "root" ]]; then
	PS1+="\[${whitefg}\]# \[${col_reset}\]"; # `#` (and reset color)
else
	PS1+="\[${whitefg}\]\$ \[${col_reset}\]"; # `$` (and reset color)
fi;

export PS1;

PS2="\[${yellowfg}\]â†’ \[${col_reset}\]";
export PS2;

